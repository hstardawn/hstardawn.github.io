<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星起之地</title>
  
  <subtitle>星起于此地，尽于空中</subtitle>
  <link href="http://hstardawn.github.io/atom.xml" rel="self"/>
  
  <link href="http://hstardawn.github.io/"/>
  <updated>2025-01-23T06:32:23.912Z</updated>
  <id>http://hstardawn.github.io/</id>
  
  <author>
    <name>star dawn</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LangGraph</title>
    <link href="http://hstardawn.github.io/posts/0.html"/>
    <id>http://hstardawn.github.io/posts/0.html</id>
    <published>2025-01-23T06:27:39.350Z</published>
    <updated>2025-01-23T06:32:23.912Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LangGraph"><a href="#LangGraph" class="headerlink" title="LangGraph"></a>LangGraph</h1><h2 id="Part-01-预备知识"><a href="#Part-01-预备知识" class="headerlink" title="Part 01 预备知识"></a>Part 01 预备知识</h2><h3 id="LangChain"><a href="#LangChain" class="headerlink" title="LangChain"></a>LangChain</h3><h4 id="Chain"><a href="#Chain" class="headerlink" title="Chain"></a>Chain</h4><blockquote><p>Chain（链）是LangChain中最核心的概念之一（看名字就知道）。简单的说，就是把自然语言输入、关联知识检索、Prompt组装、可用Tools信息、大模型调用、输出格式化等这些LLM 应用中的常见动作，组装成一个可以运行的“链”式过程。链可以直接调用，也可以用来进一步构建更强大的Agent。</p></blockquote><h4 id="LCEL"><a href="#LCEL" class="headerlink" title="LCEL"></a>LCEL</h4><blockquote><p>LCEL即LangChain Express Language，即LangChain表达语言。这是LangChain提供的一种简洁的、用于组装上述“链”的声明性方式。</p></blockquote> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> prompt = ChatPromptTemplate.from_template(&quot;讲一个关于 &#123;topic&#125; 的笑话&quot;)</span><br><span class="line">model = ChatOpenAI(model=&quot;gpt-4&quot;)</span><br><span class="line">output_parser = StrOutputParser()</span><br><span class="line">chain = prompt | model | output_parser</span><br><span class="line">#调用chain</span><br><span class="line">chain.invoke(&#123;&quot;topic&quot;: &quot;冰淇淋&quot;&#125;)</span><br></pre></td></tr></table></figure><p>这个例子把提示（prompt）、大模型（model）、输出解析（output_parser）几个组件使用管道符号“｜”链接在一起，上个组件的输出作为下一个组件的输入，一起形成了一个链。</p><p>对于最常见的RAG应用来说，使用LCEL也无非是在此之上增加一个检索相关文档的动作，类似<br>···<br>chain = setup_and_retrieval | prompt | model | output_parser<br>···</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>LCEL就是LangChain提供用来组装Chain的一种简单表示方式。用这种方式组装链，可以自动获得诸如批量、流输出、并行、异步等一系列能力；而且链可以进一步通过LCEL组装成更复杂的链与Agent。</p><h3 id="LCEL构建与调度Agent"><a href="#LCEL构建与调度Agent" class="headerlink" title="LCEL构建与调度Agent"></a>LCEL构建与调度Agent</h3><h4 id="以最常见的React-推理-amp-行动-Agent为例"><a href="#以最常见的React-推理-amp-行动-Agent为例" class="headerlink" title="以最常见的React(推理&amp;行动)Agent为例"></a>以最常见的React(推理&amp;行动)Agent为例</h4><h5 id="需要拓展的能力"><a href="#需要拓展的能力" class="headerlink" title="需要拓展的能力"></a>需要拓展的能力</h5><ol><li><strong>增加工具使用能力</strong>。 这体现在Prompt中需要注入可用工具信息，并能自动调用工具获得结果。</li><li><strong>增加“循环”能力</strong>。Agent的运行通常需要多次Reason（推理）-Act（行动）的反复与循环，直到完成任务。<h5 id="以LCEL来组装并创建运行一个Agent的简单过程如下"><a href="#以LCEL来组装并创建运行一个Agent的简单过程如下" class="headerlink" title="以LCEL来组装并创建运行一个Agent的简单过程如下"></a>以LCEL来组装并创建运行一个Agent的简单过程如下</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">定义Agent需要使用的Tools</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@tool</span><br><span class="line">def search(query: str) -&gt; str:</span><br><span class="line">&quot;&quot;&quot;此处省略&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">LCEL创建一个Agent，与Chain类似</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">agent = (</span><br><span class="line">&#123;input:&#123;输入信息&#125;, agent_scratchpad:&#123;中间步骤&#125;&#125;</span><br><span class="line">| prompt</span><br><span class="line">| model</span><br><span class="line">| AgentOutputParser()</span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">注意：Agent需要使用agent_executor调用，以增加上述两个能力</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">agent_executor = AgentExecutor(agent=agent, tools=tool_list, verbose=True)</span><br><span class="line">agent_executor.invoke(&#123;&quot;input&quot;: &quot;whats the weather in New york?&quot;&#125;)</span><br></pre></td></tr></table></figure>注意到，相对于Chain.invoke()直接运行，这里的<strong>Agent_executor的作用就是为了能够实现多次循环ReAct的动作，以最终完成任务</strong>。</li></ol><h3 id="什么是图-Graph"><a href="#什么是图-Graph" class="headerlink" title="什么是图(Graph)"></a>什么是图(Graph)</h3><p>图是计算机科学中的一种数据结构。大部分人可能都接触过一些基本的数据结构，比如队列（Queue）、堆栈（Stack）、链表（List）或者树（Tree）等，图（Graph）也是其中的一种相对复杂的数据结构。我们无意在此普及图的数据结构知识，你只需要了解的图的几个基本知识：</p><ul><li><strong>图是表示多个元素及其之间关系的一种结构</strong>。其特点是，任何两个元素之间都可以直接发生联系，所以适合表达更复杂的元素关系。</li><li>图的基本表示就是N个元素（节点/顶点）及这些元素之间的关系（边）的集合。</li><li><strong>有向无环图（Directed Acyclic Graph，DAG）</strong>：有向指的是图中的“边”有方向；无环指的是无法从某个节点经过若干“边”返回这个节点。</li></ul><h3 id="什么是RAG"><a href="#什么是RAG" class="headerlink" title="什么是RAG"></a>什么是RAG</h3><p>RAG（Retrieval-Augmented Generation）是检索增强生成的英文缩写，是一种结合了信息检索（Retrieval）和自然语言生成（Generation）的技术。它通过从外部知识库中检索与用户问题相关的最新信息，并将这些信息作为上下文输入到大型语言模型（LLM）中，从而生成更准确、更符合上下文的答案</p><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><ol><li><strong>检索(Retrieval)</strong>: 根据用户的查询内容，从外部知识库中检索与问题最相关的文档或信息。这些信息通常通过语义搜索技术找到，能够理解查询的上下文和含义</li><li><strong>增强（Augmentation）</strong>：将检索到的相关信息与用户的原始查询结合，形成一个增强的上下文</li><li><strong>生成（Generation）</strong>：将增强后的上下文输入到语言模型中，生成最终的输出</li></ol><h2 id="Part-02-LangGraph的驱动力"><a href="#Part-02-LangGraph的驱动力" class="headerlink" title="Part 02 LangGraph的驱动力"></a>Part 02 LangGraph的驱动力</h2><h3 id="链（Chain）：无法满足在循环中调用LLM以完成任务。"><a href="#链（Chain）：无法满足在循环中调用LLM以完成任务。" class="headerlink" title="* 链（Chain）：无法满足在循环中调用LLM以完成任务。"></a>* 链（Chain）：无法满足在循环中调用LLM以完成任务。</h3><p>上文中，我们可以轻易地使用LCEL来快速创建一个链，但是很显然的一个问题是：如果我们把链中的组件想象成Graph中的节点，组件之间的联系想象成Graph中的边，那么这个链就是一个有向无环图(DAG）。即在一次Chain运行中，一个调用节点无法重复/循环进入<br><img src="https://i-blog.csdnimg.cn/blog_migrate/0083ca714f4ff5c7d128533ce51ae654.png" alt=""></p><p>那么为什么需要将循环引入运行时呢？考虑一个增强的RAG应用:<br><img src="https://i-blog.csdnimg.cn/blog_migrate/cc5da155b23532d2d28402fd6ef08657.png" alt=""><br>在这个RAG应用设计中，我们可以对语义检索出来的关联文档（上下文）进行评估：如果评估的文档质量很差，可以对检索的问题进行重写（Rewrite，比如把输入的问题结合对话历史用更精确的方式来表达），并把重写结果重新交给检索器，检索出新的关联文档，这样有助于获得更精确的结果。</p><p><strong>这里把Rewrite的问题重新交给检索器，就是一个典型的“循环”动作。而在目前LangChain的简单链中是无法支持的。</strong></p><p>其他一些典型的依赖“循环”的场景包括：</p><ul><li>代码生成时的自我纠正：当借助LLM自动生成软件代码时，根据代码执行的结果进行自我反省，并要求LLM重新生成代码。</li><li>Web访问自动导航：每当进入下一界面时，需要借助多模态模型来决定下一步的动作（点击、滚动、输入等），直至完成导航。</li></ul><h3 id="AgentExecutor：尽管支持“循环”，但缺乏精确控制能力。"><a href="#AgentExecutor：尽管支持“循环”，但缺乏精确控制能力。" class="headerlink" title="* AgentExecutor：尽管支持“循环”，但缺乏精确控制能力。"></a>* AgentExecutor：尽管支持“循环”，但缺乏精确控制能力。</h3><p>那么，如果我们需要在循环中调用LLM能力，就需要借助于AgentExecutor。其调用的过程主要就是两个步骤：</p><ol><li>通过大模型来决定采取什么行动，使用什么工具，或者向用户输出响应（如运行结束时）；</li><li>执行1步骤中的行动，比如调用某个工具，并把结果继续交给大模型来决定，即返回步骤1；</li></ol><p>这里的AgentExecute存在的问题是：过于黑盒，所有的决策过程隐藏在AgentExecutor背后，缺乏更精细的控制能力，在构建复杂Agent的时候受限。这些精细化的控制要求比如：</p><ul><li>某个Agent要求首先强制调用某个Tool</li><li>在 Agent运行过程中增加人机交互步骤</li><li>能够灵活更换Prompt或者背后的LLM</li><li>多Agent（Multi-Agent）智能体构建的需求，即多个Agent协作完成任务的场景支持。（这也是Langchain相对于竞争对手Autogen等最薄弱的能力之一，也是众多开发者千呼万唤的特性）</li></ul><p>所以，让我们简单总结LangGraph诞生的动力：<strong>LangChain简单的链（Chain）不具备“循环”能力；而AgentExecutor调度的Agent运行又过于“黑盒”。因此需要一个具备更精细控制能力的框架来支持更复杂场景的LLM应用。</strong></p><h2 id="Part-03-LangGraph的设计思想"><a href="#Part-03-LangGraph的设计思想" class="headerlink" title="Part 03 LangGraph的设计思想"></a>Part 03 LangGraph的设计思想</h2><p>LangGraph并非一个独立于Langchain的新框架，它是基于Langchain之上构建的一个扩展库，可以与Langchain现有的链、LCEL等无缝协作。LangGraph能够协调多个Chain、Agent、Tool等共同协作来完成输入任务，支持LLM调用“循环”以及Agent过程的更精细化的控制。</p><p><strong>LangGraph的实现方式是把之前基于AgentExecutor的黑盒调用过程用一种新的形式来构建：状态图（StateGraph）。把基于LLM的任务（比如RAG、代码生成等）细节用Graph进行精确的定义（定义图的节点与边），最后基于这个图来编译生成应用；在任务运行过程中，维持一个中央状态对象(state)，会根据节点的跳转不断更新，状态包含的属性可自行定义。</strong></p><p>我们用官方的一个增强的RAG应用的Graph来帮助理解：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/3d85526904589528bb8b4a86763f22c2.png" alt=""><br>这个Graph中体现了LangGraph的几个基本概念：</p><ul><li><strong>StateGraph</strong>：这是代表整个状态图的基础类。</li><li><strong>Nodes</strong>: 节点。在有了图之后，可以向图中添加节点，节点通常是一个可调用的函数、一个可运行的Chain或者Agent。有一个特殊的节点叫END，进入这个节点，代表运行结束。<blockquote><p>在上图中，推理函数调用、调用检索器、生成响应内容、问题重写等都是其中的任务节点。</p></blockquote></li><li><strong>Edges</strong>:边。有了节点后，需要向图中添加边，边代表从上一个节点跳转到下一个节点的关系。目前有三种类型的边：</li><li><strong>Starting Edge</strong>：一种特殊的边。用来定义任务运行的开始节点，所以它没有上一个节点。</li><li><strong>Normal Edge</strong>：普通边。代表上一个节点运行完成后立即进入下一个节点。比如在调用Tools后获得结果后，立刻进入LLM推理节点。</li><li><strong>Conditional Edge</strong>：条件边。代表上一个节点运行完成后，需要根据条件跳转到某个节点，因此这种边不仅需要上游节点、下游节点，还需要一个条件函数，根据条件函数的返回来决定下游节点。<blockquote><p>在上图中，Check Relevance就是一个条件边，它的上游节点是检索相关文档，条件函数是判断文档是否相关，如果相关，则进入下游节点【产生回答】；如果不相关，则进入下游节点【重写输入问题】。<br>在构建好StateGraph，并增加Node和Edge后，可以通过compile编译成可运行的应用：<br><strong>app = graph.compile()</strong><br>接下来你就可以调用这个app来完成你的任务</p></blockquote></li></ul><h2 id="Part-04-LangGraph构建基础Agent"><a href="#Part-04-LangGraph构建基础Agent" class="headerlink" title="Part 04 LangGraph构建基础Agent"></a>Part 04 LangGraph构建基础Agent</h2><p>我们可以粗暴的认为LangGraph就是把现在黑盒的AgentExecutor揉碎掰开，允许你定义内部的细节结构（用图的方式），从而实现更强大的功能。那么我们当然可以用LangGraph来重新实现原来的AgentExecutor，即实现一个最基础的ReAct范式的Agent应用。<br>对应的Graph如下：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/238d021ddb51cc390fbc913aa48a7d34.png" alt=""><br>简单的实现代码如下（省略了部分细节）：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># 定义一个Graph，传入state定义（参考上图state属性）</span><br><span class="line">workflow = StateGraph(AgentState)</span><br><span class="line"> </span><br><span class="line"># 两个节点</span><br><span class="line"> </span><br><span class="line">#节点1: 推理节点，调用LLM决定action，省略了runreason细节</span><br><span class="line">workflow.add_node(&quot;reason&quot;, run_reason)</span><br><span class="line"> </span><br><span class="line">#节点2: 行动节点，调用tools执行action，省略executetools细节</span><br><span class="line">workflow.add_node(&quot;action&quot;, execute_tools)</span><br><span class="line"> </span><br><span class="line">#入口节点：总是从推理节点开始</span><br><span class="line">workflow.set_entry_point(&quot;reason&quot;)</span><br><span class="line"> </span><br><span class="line">#条件边：根据推理节点的结果决定下一步</span><br><span class="line">workflow.add_conditional_edges(</span><br><span class="line">&quot;reason&quot;,</span><br><span class="line">should_continue, #条件判断函数（自定义，根据状态中的推理结果判断）</span><br><span class="line">&#123;</span><br><span class="line">&quot;continue&quot;: &quot;action&quot;, #如果条件函数返回continue，进action节点</span><br><span class="line">&quot;end&quot;: END, #如果条件函数返回end，进END节点</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line">#普通边：action结束后，总是返回reason</span><br><span class="line">workflow.add_edge(&quot;action&quot;, &quot;reason&quot;)</span><br><span class="line"> </span><br><span class="line">#编译成app</span><br><span class="line">app = workflow.compile()</span><br><span class="line"> </span><br><span class="line">#可以调用app了，并使用流式输出</span><br><span class="line">inputs = &#123;&quot;input&quot;: &quot;you task description&quot;, &quot;chat_history&quot;: []&#125;</span><br><span class="line">for s in app.stream(inputs):</span><br><span class="line">print(list(s.values())[0])</span><br><span class="line">print(&quot;----&quot;)</span><br></pre></td></tr></table></figure><br>代码中的注释对graph构建的细节做了解释。显然，这要比简单的使用agentExecutor要复杂的多，但同时也展示了LangGraph在构建LLM应用时强大的控制能力：<strong>通过Graph的定义，可以对一个LLM应用的处理过程进行非常细节的编排设计，从而满足大量复杂场景的AI Agent应用</strong>。<br>————————————————<br>原文链接：<a href="https://blog.csdn.net/juan9872/article/details/137658555">https://blog.csdn.net/juan9872/article/details/137658555</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LangGraph&quot;&gt;&lt;a href=&quot;#LangGraph&quot; class=&quot;headerlink&quot; title=&quot;LangGraph&quot;&gt;&lt;/a&gt;LangGraph&lt;/h1&gt;&lt;h2 id=&quot;Part-01-预备知识&quot;&gt;&lt;a href=&quot;#Part-01-预备知识&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://hstardawn.github.io/posts/4a17b156.html"/>
    <id>http://hstardawn.github.io/posts/4a17b156.html</id>
    <published>2024-08-16T06:37:18.306Z</published>
    <updated>2024-08-19T06:03:42.975Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
